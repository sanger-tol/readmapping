/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: SAMTOOLS_FASTQ {
        beforeScript = { "export REF_PATH=spoof"}
        ext.args = '-F 0x200 -nt'
    }

    withName: SAMTOOLS_COLLATETOFASTQ {
        ext.args   = { (params.use_work_dir_as_temp ? "-T." : "") }
        ext.args2 = '-F 0x200 -nt'
    }

    withName: BBMAP_FILTERBYNAME {
        ext.args = 'include=f'
    }

    withName: SAMTOOLS_MERGE {
        beforeScript = { "export REF_PATH=spoof"}
        ext.args = { "-c -p" }
        ext.prefix = { "${meta.id}.merge" }
    }

    // If custom header provided, this is inserted in place of existing
    // @HD and @SQ lines, while preserving any other header entries
    withName: SAMTOOLS_REHEADER {
        ext.prefix = { "${meta.id}.reheader" }
    }

    withName: SAMTOOLS_COLLATETOFASTA {
        beforeScript = { "export REF_PATH=spoof"}
        ext.args   = { (params.use_work_dir_as_temp ? "-T." : "") }
        ext.prefix = { "${meta.chunk_id}" }
    }

    withName: SAMTOOLS_FILTERTOFASTQ {
        ext.prefix = { "${meta.chunk_id}" }
    }

    withName: BLAST_BLASTN {
        ext.args = '-task blastn -reward 1 -penalty -5 -gapopen 3 -gapextend 3 -dust yes -soft_masking true -evalue .01 -searchsp 1750000000000 -outfmt 6'
        ext.prefix = { "${meta.chunk_id}" }
    }

    withName: PACBIO_FILTER {
        ext.prefix = { "${meta.chunk_id}" }
    }

    withName: SAMTOOLS_CONVERT {
        beforeScript = { "export REF_PATH=spoof"}
        ext.args = "--output-fmt bam --write-index"
        ext.prefix = { "${meta.chunk_id}" }
    }

    withName: CONVERT_CRAM {
        ext.args = "--output-fmt cram"
    }

    withName: ".*:ALIGN_ILLUMINA:.*:CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = { "-F 0x200 -nt" }
        ext.args2       = { "-p -R '${rglines}'" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: ".*:ALIGN_ILLUMINA:.*:CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = { "-F 0x200 -nt" }
        ext.args2       = { "-ax sr" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: ".*:ALIGN_HIC:.*:CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = { "-F 0x200 -nt" }
        ext.args2       = { "-5SPCp -R '${rglines}'" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: ".*:ALIGN_HIC:.*:CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = { "" }
        ext.args2       = { "-ax sr" }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: "MINIMAP2_INDEX" {
        ext.args        = { "${fasta.size() > 2.5e9 ? (" -I " + Math.ceil(fasta.size()/1e9)+"G") : ""} "}
    }

        // minimap2 2.24 can only work with genomes up to 4 Gbp. For larger genomes, add the -I option with the genome size in Gbp.
        // In fact, we can also use -I to *decrease* the memory requirements for smaller genomes
        // NOTE: minimap2 uses the decimal system ! 1G = 1,000,000,000 bp
        // NOTE: Math.ceil returns a double, but fortunately minimap2 accepts floating point values.
        // NOTE: minimap2 2.25 raises the default to 8G, which means higher memory savings on smaller genomes

    withName: ".*:ALIGN_HIFI:.*:CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = { "-F 0x200 -nt" }
        ext.args2       = { "-ax map-hifi --cs=short -I" + Math.ceil(meta.genome_size/1e9) + 'G' }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: '.*:.*:ALIGN_HIFI:MINIMAP2_ALIGN' {
        ext.args = { "-ax map-hifi --cs=short -R ${meta.read_group} -I" + Math.ceil(meta2.genome_size/1e9) + 'G' }
        ext.prefix = { "${meta.chunk_id}" }
    }

    withName: ".*:ALIGN_CLR:.*:CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = { "-F 0x200 -nt" }
        ext.args2       = { "-ax map-pb -I" + Math.ceil(meta.genome_size/1e9) + 'G' }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: ".*:ALIGN_ONT:.*:CRAM_FILTER_MINIMAP2_FILTER5END_FIXMATE_SORT" {
        ext.args        = ""
        ext.args1       = { "-F 0x200 -nt" }
        ext.args2       = { "-ax map-ont -I" + Math.ceil(meta.genome_size/1e9) + 'G' }
        ext.args3       = "-mpu"
        ext.args4       = { "--write-index -l1" }
    }

    withName: '.*:CONVERT_STATS:SAMTOOLS_CRAM' {
        beforeScript = { "export REF_PATH=spoof"}
        ext.prefix = { "${fasta.baseName}.${meta.datatype}.${meta.id}" }
        ext.args   = '--output-fmt cram --write-index'
    }

    withName: SAMTOOLS_FLAGSTAT {
        ext.prefix = { "${bam.baseName}" }
    }

    withName: SAMTOOLS_REINDEX {
        ext.args   = '--write-index'
        ext.prefix = { "${fasta.baseName}.${meta.datatype}.${meta.id}" }
    }

    withName: SAMTOOLS_IDXSTATS {
        ext.prefix = { "${bam.baseName}" }
    }

    withName: SAMTOOLS_ADDREPLACERG {
        ext.prefix = { "${input.baseName}_addRG" }
        ext.args = { "-r ${meta.read_group} --no-PG" }
    }

    withName: SAMTOOLS_STATS {
        beforeScript = { "export REF_PATH=spoof"}
        ext.prefix = { "${input.baseName}" }
    }

    withName: CRUMBLE {
        ext.prefix = { "${input.baseName}.crumble" }
        ext.args   = { (meta.datatype == "pacbio" ? "-y pbccs " : "") + "-O bam" }
    }

    withName: '.*:CONVERT_STATS:SAMTOOLS_.*' {
        beforeScript = { "export REF_PATH=spoof"}
        publishDir = [
            path: { "${params.outdir}/read_mapping/${meta.datatype}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info/readmapping" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
